{"remainingRequest":"/home/zyx/workspaces/python/server_management/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/zyx/workspaces/python/server_management/client/src/views/Register.vue?vue&type=style&index=0&id=63ae9146&lang=scss&scoped=true&","dependencies":[{"path":"/home/zyx/workspaces/python/server_management/client/src/views/Register.vue","mtime":1621060943267},{"path":"/home/zyx/workspaces/python/server_management/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/zyx/workspaces/python/server_management/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/zyx/workspaces/python/server_management/client/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/zyx/workspaces/python/server_management/client/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/zyx/workspaces/python/server_management/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/zyx/workspaces/python/server_management/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIi4vLi4vc3R5bGVzL2F1dGgtc3R5bGVzIjsK"},{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwOA","file":"Register.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"auth-page loading\">\n    <main>\n      <div class=\"content content--side\">\n        <header class=\"codrops-header uk-flex uk-flex-center\">\n          <h1 class=\"uk-margin-remove uk-text-center\">\n            Welcome to {{ $store.getters.appName }}\n          </h1>\n          <p class=\"\">Fill in the form and get started today!</p>\n        </header>\n        <div class=\"form\">\n          <div class=\"form__item\">\n            <label class=\"form__label\" for=\"email\">Full Name</label>\n            <input class=\"form__input\" type=\"text\" v-model=\"name\" id=\"name\" />\n          </div>\n          <div class=\"form__item\">\n            <label class=\"form__label\" for=\"email\">Email Address</label>\n            <input\n              class=\"form__input\"\n              type=\"email\"\n              v-model=\"email\"\n              id=\"email\"\n            />\n          </div>\n          <div class=\"form__item\">\n            <label class=\"form__label\" for=\"password\">Password</label>\n            <div class=\"form__input-wrap\">\n              <input\n                class=\"form__input\"\n                type=\"password\"\n                v-model=\"password\"\n                id=\"password\"\n              />\n              <p class=\"form__password-strength\" id=\"strength-output\"></p>\n            </div>\n          </div>\n          <div\n            class=\"uk-flex uk-flex-center uk-flex-middle uk-margin-medium-top uk-visible@s\"\n          >\n            <span uk-icon=\"icon: info; ratio: 3;\"></span>\n            <span class=\"uk-margin-left\">\n              <small\n                >We strongly recommend that you use a secure password. Best\n                advice: when you can see the image crystal-clear, then you're\n                good!</small\n              >\n            </span>\n          </div>\n          <div class=\"form__item form__item--actions\">\n            <span\n              >Already have an account?\n              <router-link class=\"form__link\" to=\"/login\"\n                >Login here</router-link\n              >\n            </span>\n            <button-spinner ref=\"loadingButton\" @click=\"register()\"\n              >Register</button-spinner\n            >\n          </div>\n        </div>\n      </div>\n      <div class=\"content content--side\">\n        <div class=\"poster\" :style=\"'background-image:url(' + img + ')'\"></div>\n        <div class=\"canvas-wrap\">\n          <canvas></canvas>\n        </div>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\nimport img from \"./img/register.jpg\";\nimport { AUTH_SIGNUP } from \"@/store/actions/auth\";\nexport default {\n  data() {\n    return {\n      img: img,\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    };\n  },\n  methods: {\n    register() {\n      this.$refs.loadingButton.startLoading();\n      const { name, email, password } = this;\n      this.$store\n        .dispatch(AUTH_SIGNUP, { name, email, password })\n        .then(() => {\n          this.$refs.loadingButton.stopLoading();\n          this.$snack.success({\n            text:\n              \"Successfully registered to \" +\n              this.$store.getters.appName +\n              \". Please log in to continue.\"\n          });\n          this.$router.push(\"/\");\n        })\n        .catch(error => {\n          this.$refs.loadingButton.stopLoading();\n          this.$snack.danger({\n            text: error.message\n          });\n        });\n    }\n  },\n  mounted() {\n    const passwordInput = document.querySelector(\"#password\");\n    const passwordFeedback = document.querySelector(\"#strength-output\");\n    const strengthStr = {\n      0: \"Worst\",\n      1: \"Bad\",\n      2: \"Weak\",\n      3: \"Good\",\n      4: \"Strong\"\n    };\n    const canvasWrapper = document.querySelector(\".canvas-wrap\");\n    const canvas = canvasWrapper.querySelector(\"canvas\");\n    const poster = document.querySelector(\".poster\");\n    const posterImg = poster.style.backgroundImage\n      .match(/\\((.*?)\\)/)[1]\n      .replace(/('|\")/g, \"\");\n    window.imagesLoaded(poster, { background: true }, () => {\n      // on callback, add if you deem something necessary\n    });\n\n    // The following code was taken and modified from http://jsfiddle.net/u6apxgfk/390/\n    // (C) Ken Fyrstenberg, Epistemex, License: CC3.0-attr\n\n    // and merged with https://codepen.io/bassta/pen/OPVzyB?editors=1010\n\n    const ctx = canvas.getContext(\"2d\");\n    const img = new Image();\n    let imgRatio;\n    let wrapperRatio;\n    let newWidth;\n    let newHeight;\n    let newX;\n    let newY;\n\n    let pxFactor = 1;\n\n    img.src = posterImg;\n    img.onload = () => {\n      const imgWidth = img.width;\n      const imgHeight = img.height;\n      imgRatio = imgWidth / imgHeight;\n      setCanvasSize();\n      render();\n    };\n\n    const setCanvasSize = () => {\n      canvas.width = canvasWrapper.offsetWidth;\n      canvas.height = canvasWrapper.offsetHeight;\n    };\n\n    const render = () => {\n      const w = canvasWrapper.offsetWidth;\n      const h = canvasWrapper.offsetHeight;\n\n      newWidth = w;\n      newHeight = h;\n      newX = 0;\n      newY = 0;\n      wrapperRatio = newWidth / newHeight;\n\n      if (wrapperRatio > imgRatio) {\n        newHeight = Math.round(w / imgRatio);\n        newY = (h - newHeight) / 2;\n      } else {\n        newWidth = Math.round(h * imgRatio);\n        newX = (w - newWidth) / 2;\n      }\n\n      // pxFactor will depend on the current typed password.\n      // values will be in the range [1,100].\n      const size = pxFactor * 0.01;\n\n      // turn off image smoothing - this will give the pixelated effect\n      ctx.mozImageSmoothingEnabled = size === 1 ? true : false;\n      ctx.webkitImageSmoothingEnabled = size === 1 ? true : false;\n      ctx.imageSmoothingEnabled = size === 1 ? true : false;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      // draw original image to the scaled size\n      ctx.drawImage(img, 0, 0, w * size, h * size);\n      // then draw that scaled image thumb back to fill canvas\n      // As smoothing is off the result will be pixelated\n      ctx.drawImage(\n        canvas,\n        0,\n        0,\n        w * size,\n        h * size,\n        newX,\n        newY,\n        newWidth + 0.05 * w,\n        newHeight + 0.05 * h\n      );\n    };\n\n    window.addEventListener(\"resize\", () => {\n      setCanvasSize();\n      render();\n    });\n\n    passwordInput.addEventListener(\"input\", () => {\n      const val = passwordInput.value;\n      const result = window.zxcvbn(val);\n      // We want to reveal the image as the password gets stronger. Since the zxcvbn.score has\n      // only 5 different values (0-4) we will use the zxcvbn.guesses_log10 output.\n      // The guesses_log10 will be >= 11 when the password is considered strong,\n      // so we want to map a factor of 1 (all pixelated) to 100 (clear image) to\n      // a value of 0 to 11 of guesses_log10.\n      // This result will be used in the render function.\n      pxFactor = (99 / 11) * Math.min(11, Math.round(result.guesses_log10)) + 1;\n\n      // so we see most of the time pixels rather than approaching a clear image sooner..\n      if (pxFactor != 1 && pxFactor != 100) {\n        pxFactor -= (pxFactor / 100) * 50;\n      }\n\n      passwordFeedback.innerHTML =\n        val !== \"\" ? `Password strength: ${strengthStr[result.score]}` : \"\";\n      render();\n    });\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"./../styles/auth-styles\";\n</style>\n"]}]}